// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/mesg-foundation/core/interface/grpc/core/api.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployServiceReply_Status_Type int32

const (
	// RUNNING indicates that status message belongs to an active state.
	DeployServiceReply_Status_RUNNING DeployServiceReply_Status_Type = 0
	// DONE indicates that status message belongs to completed state.
	DeployServiceReply_Status_DONE DeployServiceReply_Status_Type = 1
)

var DeployServiceReply_Status_Type_name = map[int32]string{
	0: "RUNNING",
	1: "DONE",
}
var DeployServiceReply_Status_Type_value = map[string]int32{
	"RUNNING": 0,
	"DONE":    1,
}

func (x DeployServiceReply_Status_Type) String() string {
	return proto.EnumName(DeployServiceReply_Status_Type_name, int32(x))
}
func (DeployServiceReply_Status_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{11, 0, 0}
}

type LogData_Type int32

const (
	// Standard represents standard log output.
	LogData_Standard LogData_Type = 0
	// Error represents error log output.
	LogData_Error LogData_Type = 1
)

var LogData_Type_name = map[int32]string{
	0: "Standard",
	1: "Error",
}
var LogData_Type_value = map[string]int32{
	"Standard": 0,
	"Error":    1,
}

func (x LogData_Type) String() string {
	return proto.EnumName(LogData_Type_name, int32(x))
}
func (LogData_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{19, 0}
}

// The request's data for the `ListenEvent` stream's API.
//
// **Example**
// ```json
// {
//   "serviceID":   "__SERVICE_ID__",
//   "eventFilter": "__EVENT_KEY_TO_MATCH__"
// }
// ```
type ListenEventRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	EventFilter          string   `protobuf:"bytes,2,opt,name=eventFilter,proto3" json:"eventFilter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenEventRequest) Reset()         { *m = ListenEventRequest{} }
func (m *ListenEventRequest) String() string { return proto.CompactTextString(m) }
func (*ListenEventRequest) ProtoMessage()    {}
func (*ListenEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{0}
}
func (m *ListenEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenEventRequest.Unmarshal(m, b)
}
func (m *ListenEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenEventRequest.Marshal(b, m, deterministic)
}
func (dst *ListenEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenEventRequest.Merge(dst, src)
}
func (m *ListenEventRequest) XXX_Size() int {
	return xxx_messageInfo_ListenEventRequest.Size(m)
}
func (m *ListenEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenEventRequest proto.InternalMessageInfo

func (m *ListenEventRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenEventRequest) GetEventFilter() string {
	if m != nil {
		return m.EventFilter
	}
	return ""
}

// The data received from the stream of the `ListenEvent` API.
// The data will be received over time as long as the stream is open.
//
// **Example**
// ```json
// {
//   "eventKey":  "__EVENT_KEY__",
//   "eventData": "{\"foo\":\"bar\"}"
// }
// ```
type EventData struct {
	EventKey             string   `protobuf:"bytes,1,opt,name=eventKey,proto3" json:"eventKey,omitempty"`
	EventData            string   `protobuf:"bytes,2,opt,name=eventData,proto3" json:"eventData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventData) Reset()         { *m = EventData{} }
func (m *EventData) String() string { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()    {}
func (*EventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{1}
}
func (m *EventData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventData.Unmarshal(m, b)
}
func (m *EventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventData.Marshal(b, m, deterministic)
}
func (dst *EventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventData.Merge(dst, src)
}
func (m *EventData) XXX_Size() int {
	return xxx_messageInfo_EventData.Size(m)
}
func (m *EventData) XXX_DiscardUnknown() {
	xxx_messageInfo_EventData.DiscardUnknown(m)
}

var xxx_messageInfo_EventData proto.InternalMessageInfo

func (m *EventData) GetEventKey() string {
	if m != nil {
		return m.EventKey
	}
	return ""
}

func (m *EventData) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

// The request's data for the `ListenResult` stream API.
//
// **Example**
// ```json
// {
//   "serviceID":     "__SERVICE_ID__",
//   "taskFilter":    "__TASK_KEY_TO_MATCH__",
//   "outputFilter":  "__OUTPUT_KEY_TO_MATCH__",
//   "tagFilters":     ["tagX"]
// }
// ```
type ListenResultRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	TaskFilter           string   `protobuf:"bytes,2,opt,name=taskFilter,proto3" json:"taskFilter,omitempty"`
	OutputFilter         string   `protobuf:"bytes,3,opt,name=outputFilter,proto3" json:"outputFilter,omitempty"`
	TagFilters           []string `protobuf:"bytes,4,rep,name=tagFilters,proto3" json:"tagFilters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListenResultRequest) Reset()         { *m = ListenResultRequest{} }
func (m *ListenResultRequest) String() string { return proto.CompactTextString(m) }
func (*ListenResultRequest) ProtoMessage()    {}
func (*ListenResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{2}
}
func (m *ListenResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenResultRequest.Unmarshal(m, b)
}
func (m *ListenResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenResultRequest.Marshal(b, m, deterministic)
}
func (dst *ListenResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenResultRequest.Merge(dst, src)
}
func (m *ListenResultRequest) XXX_Size() int {
	return xxx_messageInfo_ListenResultRequest.Size(m)
}
func (m *ListenResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenResultRequest proto.InternalMessageInfo

func (m *ListenResultRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ListenResultRequest) GetTaskFilter() string {
	if m != nil {
		return m.TaskFilter
	}
	return ""
}

func (m *ListenResultRequest) GetOutputFilter() string {
	if m != nil {
		return m.OutputFilter
	}
	return ""
}

func (m *ListenResultRequest) GetTagFilters() []string {
	if m != nil {
		return m.TagFilters
	}
	return nil
}

// The data received from the stream of the `ListenResult` API.
// The data will be received over time as long as the stream is open.
//
// **Example**
// ```json
// {
//   "executionID":   "__EXECUTION_ID__",
//   "taskKey":       "__TASK_KEY__",
//   "outputKey":     "__OUTPUT_KEY__",
//   "outputData":    "{\"foo\":\"bar\"}",
//   "executionTags": ["executionX", "test"]
// }
// ```
type ResultData struct {
	ExecutionID          string   `protobuf:"bytes,1,opt,name=executionID,proto3" json:"executionID,omitempty"`
	TaskKey              string   `protobuf:"bytes,2,opt,name=taskKey,proto3" json:"taskKey,omitempty"`
	OutputKey            string   `protobuf:"bytes,3,opt,name=outputKey,proto3" json:"outputKey,omitempty"`
	OutputData           string   `protobuf:"bytes,4,opt,name=outputData,proto3" json:"outputData,omitempty"`
	ExecutionTags        []string `protobuf:"bytes,5,rep,name=executionTags,proto3" json:"executionTags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultData) Reset()         { *m = ResultData{} }
func (m *ResultData) String() string { return proto.CompactTextString(m) }
func (*ResultData) ProtoMessage()    {}
func (*ResultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{3}
}
func (m *ResultData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultData.Unmarshal(m, b)
}
func (m *ResultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultData.Marshal(b, m, deterministic)
}
func (dst *ResultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultData.Merge(dst, src)
}
func (m *ResultData) XXX_Size() int {
	return xxx_messageInfo_ResultData.Size(m)
}
func (m *ResultData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultData.DiscardUnknown(m)
}

var xxx_messageInfo_ResultData proto.InternalMessageInfo

func (m *ResultData) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

func (m *ResultData) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ResultData) GetOutputKey() string {
	if m != nil {
		return m.OutputKey
	}
	return ""
}

func (m *ResultData) GetOutputData() string {
	if m != nil {
		return m.OutputData
	}
	return ""
}

func (m *ResultData) GetExecutionTags() []string {
	if m != nil {
		return m.ExecutionTags
	}
	return nil
}

// The request's data for the `ExecuteTask` API.
//
// **Example**
// ```json
// {
//   "serviceID":     "__SERVICE_ID__",
//   "taskKey":       "__TASK_KEY__",
//   "inputData":     "{\"foo\":\"bar\"}",
//   "executionTags": ["executionX", "test"]
// }
// ```
type ExecuteTaskRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	TaskKey              string   `protobuf:"bytes,2,opt,name=taskKey,proto3" json:"taskKey,omitempty"`
	InputData            string   `protobuf:"bytes,3,opt,name=inputData,proto3" json:"inputData,omitempty"`
	ExecutionTags        []string `protobuf:"bytes,4,rep,name=executionTags,proto3" json:"executionTags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteTaskRequest) Reset()         { *m = ExecuteTaskRequest{} }
func (m *ExecuteTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteTaskRequest) ProtoMessage()    {}
func (*ExecuteTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{4}
}
func (m *ExecuteTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteTaskRequest.Unmarshal(m, b)
}
func (m *ExecuteTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteTaskRequest.Marshal(b, m, deterministic)
}
func (dst *ExecuteTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteTaskRequest.Merge(dst, src)
}
func (m *ExecuteTaskRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteTaskRequest.Size(m)
}
func (m *ExecuteTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteTaskRequest proto.InternalMessageInfo

func (m *ExecuteTaskRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ExecuteTaskRequest) GetTaskKey() string {
	if m != nil {
		return m.TaskKey
	}
	return ""
}

func (m *ExecuteTaskRequest) GetInputData() string {
	if m != nil {
		return m.InputData
	}
	return ""
}

func (m *ExecuteTaskRequest) GetExecutionTags() []string {
	if m != nil {
		return m.ExecutionTags
	}
	return nil
}

// The reply's data of the `ExecuteTask` API.
//
// **Example**
// ```json
// {
//   "executionID": "__EXECUTION_ID__"
// }
// ```
type ExecuteTaskReply struct {
	ExecutionID          string   `protobuf:"bytes,1,opt,name=executionID,proto3" json:"executionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteTaskReply) Reset()         { *m = ExecuteTaskReply{} }
func (m *ExecuteTaskReply) String() string { return proto.CompactTextString(m) }
func (*ExecuteTaskReply) ProtoMessage()    {}
func (*ExecuteTaskReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{5}
}
func (m *ExecuteTaskReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteTaskReply.Unmarshal(m, b)
}
func (m *ExecuteTaskReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteTaskReply.Marshal(b, m, deterministic)
}
func (dst *ExecuteTaskReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteTaskReply.Merge(dst, src)
}
func (m *ExecuteTaskReply) XXX_Size() int {
	return xxx_messageInfo_ExecuteTaskReply.Size(m)
}
func (m *ExecuteTaskReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteTaskReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteTaskReply proto.InternalMessageInfo

func (m *ExecuteTaskReply) GetExecutionID() string {
	if m != nil {
		return m.ExecutionID
	}
	return ""
}

// The request's data for the `StartService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type StartServiceRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartServiceRequest) Reset()         { *m = StartServiceRequest{} }
func (m *StartServiceRequest) String() string { return proto.CompactTextString(m) }
func (*StartServiceRequest) ProtoMessage()    {}
func (*StartServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{6}
}
func (m *StartServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartServiceRequest.Unmarshal(m, b)
}
func (m *StartServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartServiceRequest.Marshal(b, m, deterministic)
}
func (dst *StartServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServiceRequest.Merge(dst, src)
}
func (m *StartServiceRequest) XXX_Size() int {
	return xxx_messageInfo_StartServiceRequest.Size(m)
}
func (m *StartServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartServiceRequest proto.InternalMessageInfo

func (m *StartServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of `StartService` API doesn't contain any data.
type StartServiceReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartServiceReply) Reset()         { *m = StartServiceReply{} }
func (m *StartServiceReply) String() string { return proto.CompactTextString(m) }
func (*StartServiceReply) ProtoMessage()    {}
func (*StartServiceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{7}
}
func (m *StartServiceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartServiceReply.Unmarshal(m, b)
}
func (m *StartServiceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartServiceReply.Marshal(b, m, deterministic)
}
func (dst *StartServiceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartServiceReply.Merge(dst, src)
}
func (m *StartServiceReply) XXX_Size() int {
	return xxx_messageInfo_StartServiceReply.Size(m)
}
func (m *StartServiceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StartServiceReply.DiscardUnknown(m)
}

var xxx_messageInfo_StartServiceReply proto.InternalMessageInfo

// The request's data for the `StopService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type StopServiceRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopServiceRequest) Reset()         { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()    {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{8}
}
func (m *StopServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopServiceRequest.Unmarshal(m, b)
}
func (m *StopServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopServiceRequest.Marshal(b, m, deterministic)
}
func (dst *StopServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopServiceRequest.Merge(dst, src)
}
func (m *StopServiceRequest) XXX_Size() int {
	return xxx_messageInfo_StopServiceRequest.Size(m)
}
func (m *StopServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopServiceRequest proto.InternalMessageInfo

func (m *StopServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of `StopService` API doesn't contain any data.
type StopServiceReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopServiceReply) Reset()         { *m = StopServiceReply{} }
func (m *StopServiceReply) String() string { return proto.CompactTextString(m) }
func (*StopServiceReply) ProtoMessage()    {}
func (*StopServiceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{9}
}
func (m *StopServiceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopServiceReply.Unmarshal(m, b)
}
func (m *StopServiceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopServiceReply.Marshal(b, m, deterministic)
}
func (dst *StopServiceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopServiceReply.Merge(dst, src)
}
func (m *StopServiceReply) XXX_Size() int {
	return xxx_messageInfo_StopServiceReply.Size(m)
}
func (m *StopServiceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StopServiceReply.DiscardUnknown(m)
}

var xxx_messageInfo_StopServiceReply proto.InternalMessageInfo

// The request's data for `DeployService` API.
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type DeployServiceRequest struct {
	// Types that are valid to be assigned to Value:
	//	*DeployServiceRequest_Url
	//	*DeployServiceRequest_Chunk
	Value                isDeployServiceRequest_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DeployServiceRequest) Reset()         { *m = DeployServiceRequest{} }
func (m *DeployServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeployServiceRequest) ProtoMessage()    {}
func (*DeployServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{10}
}
func (m *DeployServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployServiceRequest.Unmarshal(m, b)
}
func (m *DeployServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployServiceRequest.Marshal(b, m, deterministic)
}
func (dst *DeployServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployServiceRequest.Merge(dst, src)
}
func (m *DeployServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DeployServiceRequest.Size(m)
}
func (m *DeployServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployServiceRequest proto.InternalMessageInfo

type isDeployServiceRequest_Value interface {
	isDeployServiceRequest_Value()
}

type DeployServiceRequest_Url struct {
	Url string `protobuf:"bytes,2,opt,name=url,proto3,oneof"`
}

type DeployServiceRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,3,opt,name=chunk,proto3,oneof"`
}

func (*DeployServiceRequest_Url) isDeployServiceRequest_Value() {}

func (*DeployServiceRequest_Chunk) isDeployServiceRequest_Value() {}

func (m *DeployServiceRequest) GetValue() isDeployServiceRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DeployServiceRequest) GetUrl() string {
	if x, ok := m.GetValue().(*DeployServiceRequest_Url); ok {
		return x.Url
	}
	return ""
}

func (m *DeployServiceRequest) GetChunk() []byte {
	if x, ok := m.GetValue().(*DeployServiceRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeployServiceRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeployServiceRequest_OneofMarshaler, _DeployServiceRequest_OneofUnmarshaler, _DeployServiceRequest_OneofSizer, []interface{}{
		(*DeployServiceRequest_Url)(nil),
		(*DeployServiceRequest_Chunk)(nil),
	}
}

func _DeployServiceRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeployServiceRequest)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceRequest_Url:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Url)
	case *DeployServiceRequest_Chunk:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Chunk)
	case nil:
	default:
		return fmt.Errorf("DeployServiceRequest.Value has unexpected type %T", x)
	}
	return nil
}

func _DeployServiceRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeployServiceRequest)
	switch tag {
	case 2: // value.url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &DeployServiceRequest_Url{x}
		return true, err
	case 3: // value.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &DeployServiceRequest_Chunk{x}
		return true, err
	default:
		return false, nil
	}
}

func _DeployServiceRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeployServiceRequest)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceRequest_Url:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Url)))
		n += len(x.Url)
	case *DeployServiceRequest_Chunk:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Chunk)))
		n += len(x.Chunk)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The reply's data of `DeployService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type DeployServiceReply struct {
	// Types that are valid to be assigned to Value:
	//	*DeployServiceReply_Status_
	//	*DeployServiceReply_ServiceID
	//	*DeployServiceReply_ValidationError
	Value                isDeployServiceReply_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DeployServiceReply) Reset()         { *m = DeployServiceReply{} }
func (m *DeployServiceReply) String() string { return proto.CompactTextString(m) }
func (*DeployServiceReply) ProtoMessage()    {}
func (*DeployServiceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{11}
}
func (m *DeployServiceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployServiceReply.Unmarshal(m, b)
}
func (m *DeployServiceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployServiceReply.Marshal(b, m, deterministic)
}
func (dst *DeployServiceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployServiceReply.Merge(dst, src)
}
func (m *DeployServiceReply) XXX_Size() int {
	return xxx_messageInfo_DeployServiceReply.Size(m)
}
func (m *DeployServiceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployServiceReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeployServiceReply proto.InternalMessageInfo

type isDeployServiceReply_Value interface {
	isDeployServiceReply_Value()
}

type DeployServiceReply_Status_ struct {
	Status *DeployServiceReply_Status `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type DeployServiceReply_ServiceID struct {
	ServiceID string `protobuf:"bytes,3,opt,name=serviceID,proto3,oneof"`
}

type DeployServiceReply_ValidationError struct {
	ValidationError string `protobuf:"bytes,4,opt,name=validationError,proto3,oneof"`
}

func (*DeployServiceReply_Status_) isDeployServiceReply_Value() {}

func (*DeployServiceReply_ServiceID) isDeployServiceReply_Value() {}

func (*DeployServiceReply_ValidationError) isDeployServiceReply_Value() {}

func (m *DeployServiceReply) GetValue() isDeployServiceReply_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DeployServiceReply) GetStatus() *DeployServiceReply_Status {
	if x, ok := m.GetValue().(*DeployServiceReply_Status_); ok {
		return x.Status
	}
	return nil
}

func (m *DeployServiceReply) GetServiceID() string {
	if x, ok := m.GetValue().(*DeployServiceReply_ServiceID); ok {
		return x.ServiceID
	}
	return ""
}

func (m *DeployServiceReply) GetValidationError() string {
	if x, ok := m.GetValue().(*DeployServiceReply_ValidationError); ok {
		return x.ValidationError
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeployServiceReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeployServiceReply_OneofMarshaler, _DeployServiceReply_OneofUnmarshaler, _DeployServiceReply_OneofSizer, []interface{}{
		(*DeployServiceReply_Status_)(nil),
		(*DeployServiceReply_ServiceID)(nil),
		(*DeployServiceReply_ValidationError)(nil),
	}
}

func _DeployServiceReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeployServiceReply)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceReply_Status_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *DeployServiceReply_ServiceID:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ServiceID)
	case *DeployServiceReply_ValidationError:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ValidationError)
	case nil:
	default:
		return fmt.Errorf("DeployServiceReply.Value has unexpected type %T", x)
	}
	return nil
}

func _DeployServiceReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeployServiceReply)
	switch tag {
	case 2: // value.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeployServiceReply_Status)
		err := b.DecodeMessage(msg)
		m.Value = &DeployServiceReply_Status_{msg}
		return true, err
	case 3: // value.serviceID
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &DeployServiceReply_ServiceID{x}
		return true, err
	case 4: // value.validationError
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &DeployServiceReply_ValidationError{x}
		return true, err
	default:
		return false, nil
	}
}

func _DeployServiceReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeployServiceReply)
	// value
	switch x := m.Value.(type) {
	case *DeployServiceReply_Status_:
		s := proto.Size(x.Status)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeployServiceReply_ServiceID:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ServiceID)))
		n += len(x.ServiceID)
	case *DeployServiceReply_ValidationError:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ValidationError)))
		n += len(x.ValidationError)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeployServiceReply_Status struct {
	// message is status message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// type is the type of status message.
	Type                 DeployServiceReply_Status_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.DeployServiceReply_Status_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DeployServiceReply_Status) Reset()         { *m = DeployServiceReply_Status{} }
func (m *DeployServiceReply_Status) String() string { return proto.CompactTextString(m) }
func (*DeployServiceReply_Status) ProtoMessage()    {}
func (*DeployServiceReply_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{11, 0}
}
func (m *DeployServiceReply_Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployServiceReply_Status.Unmarshal(m, b)
}
func (m *DeployServiceReply_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployServiceReply_Status.Marshal(b, m, deterministic)
}
func (dst *DeployServiceReply_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployServiceReply_Status.Merge(dst, src)
}
func (m *DeployServiceReply_Status) XXX_Size() int {
	return xxx_messageInfo_DeployServiceReply_Status.Size(m)
}
func (m *DeployServiceReply_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployServiceReply_Status.DiscardUnknown(m)
}

var xxx_messageInfo_DeployServiceReply_Status proto.InternalMessageInfo

func (m *DeployServiceReply_Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeployServiceReply_Status) GetType() DeployServiceReply_Status_Type {
	if m != nil {
		return m.Type
	}
	return DeployServiceReply_Status_RUNNING
}

// Request's data of the `DeleteService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type DeleteServiceRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServiceRequest) Reset()         { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()    {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{12}
}
func (m *DeleteServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServiceRequest.Unmarshal(m, b)
}
func (m *DeleteServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServiceRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceRequest.Merge(dst, src)
}
func (m *DeleteServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteServiceRequest.Size(m)
}
func (m *DeleteServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceRequest proto.InternalMessageInfo

func (m *DeleteServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// Reply of `DeleteService` API doesn't contain any data.
type DeleteServiceReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServiceReply) Reset()         { *m = DeleteServiceReply{} }
func (m *DeleteServiceReply) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceReply) ProtoMessage()    {}
func (*DeleteServiceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{13}
}
func (m *DeleteServiceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServiceReply.Unmarshal(m, b)
}
func (m *DeleteServiceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServiceReply.Marshal(b, m, deterministic)
}
func (dst *DeleteServiceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceReply.Merge(dst, src)
}
func (m *DeleteServiceReply) XXX_Size() int {
	return xxx_messageInfo_DeleteServiceReply.Size(m)
}
func (m *DeleteServiceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceReply proto.InternalMessageInfo

// Reply of `ListServices` API doesn't contain any data.
type ListServicesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListServicesRequest) Reset()         { *m = ListServicesRequest{} }
func (m *ListServicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListServicesRequest) ProtoMessage()    {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{14}
}
func (m *ListServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServicesRequest.Unmarshal(m, b)
}
func (m *ListServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServicesRequest.Marshal(b, m, deterministic)
}
func (dst *ListServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesRequest.Merge(dst, src)
}
func (m *ListServicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListServicesRequest.Size(m)
}
func (m *ListServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesRequest proto.InternalMessageInfo

// The reply's data of the `ListServices` API.
//
// **Example**
// ```json
// [{
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }]
// ```
type ListServicesReply struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListServicesReply) Reset()         { *m = ListServicesReply{} }
func (m *ListServicesReply) String() string { return proto.CompactTextString(m) }
func (*ListServicesReply) ProtoMessage()    {}
func (*ListServicesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{15}
}
func (m *ListServicesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServicesReply.Unmarshal(m, b)
}
func (m *ListServicesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServicesReply.Marshal(b, m, deterministic)
}
func (dst *ListServicesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesReply.Merge(dst, src)
}
func (m *ListServicesReply) XXX_Size() int {
	return xxx_messageInfo_ListServicesReply.Size(m)
}
func (m *ListServicesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesReply proto.InternalMessageInfo

func (m *ListServicesReply) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// The request's data for the `GetService` API.
//
// **Example**
// ```json
// {
//   "serviceID": "__SERVICE_ID__"
// }
// ```
type GetServiceRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceRequest) Reset()         { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()    {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{16}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServiceRequest.Unmarshal(m, b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
}
func (dst *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(dst, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return xxx_messageInfo_GetServiceRequest.Size(m)
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

func (m *GetServiceRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

// The reply's data of the `GetService` API.
//
// **Example**
// ```json
// {
//   "service": {
//     "name": "serviceX",
//     "events": {
//       "eventX": {
//         "data": {
//           "dataX": { "type": "String" }
//         }
//       }
//     },
//     "tasks": {
//       "taskX": {
//         "inputs": {
//           "foo": { "type": "String" }
//         },
//         "outputs": {
//           "outputX": {
//             "data": {
//               "resX": { "type": "String" }
//             }
//           }
//         }
//       }
//     }
//   }
// }
// ```
type GetServiceReply struct {
	Service              *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceReply) Reset()         { *m = GetServiceReply{} }
func (m *GetServiceReply) String() string { return proto.CompactTextString(m) }
func (*GetServiceReply) ProtoMessage()    {}
func (*GetServiceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{17}
}
func (m *GetServiceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServiceReply.Unmarshal(m, b)
}
func (m *GetServiceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServiceReply.Marshal(b, m, deterministic)
}
func (dst *GetServiceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceReply.Merge(dst, src)
}
func (m *GetServiceReply) XXX_Size() int {
	return xxx_messageInfo_GetServiceReply.Size(m)
}
func (m *GetServiceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceReply proto.InternalMessageInfo

func (m *GetServiceReply) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

// The request's data for `ServiceLogs` API.
type ServiceLogsRequest struct {
	ServiceID            string   `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	Dependencies         []string `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceLogsRequest) Reset()         { *m = ServiceLogsRequest{} }
func (m *ServiceLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceLogsRequest) ProtoMessage()    {}
func (*ServiceLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{18}
}
func (m *ServiceLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceLogsRequest.Unmarshal(m, b)
}
func (m *ServiceLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceLogsRequest.Marshal(b, m, deterministic)
}
func (dst *ServiceLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLogsRequest.Merge(dst, src)
}
func (m *ServiceLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceLogsRequest.Size(m)
}
func (m *ServiceLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLogsRequest proto.InternalMessageInfo

func (m *ServiceLogsRequest) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *ServiceLogsRequest) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

// LogData holds the log data chunk and log info of service dependencies.
type LogData struct {
	// dependency is the dependency that data belongs.
	Dependency string `protobuf:"bytes,1,opt,name=dependency,proto3" json:"dependency,omitempty"`
	// type is the log type.
	Type LogData_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.LogData_Type" json:"type,omitempty"`
	// data is a log data chunk.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogData) Reset()         { *m = LogData{} }
func (m *LogData) String() string { return proto.CompactTextString(m) }
func (*LogData) ProtoMessage()    {}
func (*LogData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5f64e5fc3749a8a2, []int{19}
}
func (m *LogData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogData.Unmarshal(m, b)
}
func (m *LogData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogData.Marshal(b, m, deterministic)
}
func (dst *LogData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogData.Merge(dst, src)
}
func (m *LogData) XXX_Size() int {
	return xxx_messageInfo_LogData.Size(m)
}
func (m *LogData) XXX_DiscardUnknown() {
	xxx_messageInfo_LogData.DiscardUnknown(m)
}

var xxx_messageInfo_LogData proto.InternalMessageInfo

func (m *LogData) GetDependency() string {
	if m != nil {
		return m.Dependency
	}
	return ""
}

func (m *LogData) GetType() LogData_Type {
	if m != nil {
		return m.Type
	}
	return LogData_Standard
}

func (m *LogData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ListenEventRequest)(nil), "api.ListenEventRequest")
	proto.RegisterType((*EventData)(nil), "api.EventData")
	proto.RegisterType((*ListenResultRequest)(nil), "api.ListenResultRequest")
	proto.RegisterType((*ResultData)(nil), "api.ResultData")
	proto.RegisterType((*ExecuteTaskRequest)(nil), "api.ExecuteTaskRequest")
	proto.RegisterType((*ExecuteTaskReply)(nil), "api.ExecuteTaskReply")
	proto.RegisterType((*StartServiceRequest)(nil), "api.StartServiceRequest")
	proto.RegisterType((*StartServiceReply)(nil), "api.StartServiceReply")
	proto.RegisterType((*StopServiceRequest)(nil), "api.StopServiceRequest")
	proto.RegisterType((*StopServiceReply)(nil), "api.StopServiceReply")
	proto.RegisterType((*DeployServiceRequest)(nil), "api.DeployServiceRequest")
	proto.RegisterType((*DeployServiceReply)(nil), "api.DeployServiceReply")
	proto.RegisterType((*DeployServiceReply_Status)(nil), "api.DeployServiceReply.Status")
	proto.RegisterType((*DeleteServiceRequest)(nil), "api.DeleteServiceRequest")
	proto.RegisterType((*DeleteServiceReply)(nil), "api.DeleteServiceReply")
	proto.RegisterType((*ListServicesRequest)(nil), "api.ListServicesRequest")
	proto.RegisterType((*ListServicesReply)(nil), "api.ListServicesReply")
	proto.RegisterType((*GetServiceRequest)(nil), "api.GetServiceRequest")
	proto.RegisterType((*GetServiceReply)(nil), "api.GetServiceReply")
	proto.RegisterType((*ServiceLogsRequest)(nil), "api.ServiceLogsRequest")
	proto.RegisterType((*LogData)(nil), "api.LogData")
	proto.RegisterEnum("api.DeployServiceReply_Status_Type", DeployServiceReply_Status_Type_name, DeployServiceReply_Status_Type_value)
	proto.RegisterEnum("api.LogData_Type", LogData_Type_name, LogData_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreClient interface {
	// Subscribe to a stream that listens for events from a service.
	ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error)
	// Subscribe to a stream that listens for task's result from a service.
	ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error)
	// Execute a service's task through [Core](../guide/start-here/core.md).
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error)
	// Start a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error)
	// Stop a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error)
	// Deploy a service to [Core](../guide/start-here/core.md). This will give you an unique identifier which is used to interact with the service.
	DeployService(ctx context.Context, opts ...grpc.CallOption) (Core_DeployServiceClient, error)
	// Delete a service from Core. This function only deletes a deployed service in [Core](../guide/start-here/core.md). If the service's code is on your computer, the source code will not be deleted.
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error)
	// List all services already deployed in [Core](../guide/start-here/core.md).
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error)
	// Get the definition of an already-deployed service from its ID.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error)
	// ServiceLogs gives a stream for dependency logs of a service.
	ServiceLogs(ctx context.Context, in *ServiceLogsRequest, opts ...grpc.CallOption) (Core_ServiceLogsClient, error)
}

type coreClient struct {
	cc *grpc.ClientConn
}

func NewCoreClient(cc *grpc.ClientConn) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) ListenEvent(ctx context.Context, in *ListenEventRequest, opts ...grpc.CallOption) (Core_ListenEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[0], "/api.Core/ListenEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenEventClient interface {
	Recv() (*EventData, error)
	grpc.ClientStream
}

type coreListenEventClient struct {
	grpc.ClientStream
}

func (x *coreListenEventClient) Recv() (*EventData, error) {
	m := new(EventData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ListenResult(ctx context.Context, in *ListenResultRequest, opts ...grpc.CallOption) (Core_ListenResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[1], "/api.Core/ListenResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreListenResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ListenResultClient interface {
	Recv() (*ResultData, error)
	grpc.ClientStream
}

type coreListenResultClient struct {
	grpc.ClientStream
}

func (x *coreListenResultClient) Recv() (*ResultData, error) {
	m := new(ResultData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskReply, error) {
	out := new(ExecuteTaskReply)
	err := c.cc.Invoke(ctx, "/api.Core/ExecuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceReply, error) {
	out := new(StartServiceReply)
	err := c.cc.Invoke(ctx, "/api.Core/StartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) StopService(ctx context.Context, in *StopServiceRequest, opts ...grpc.CallOption) (*StopServiceReply, error) {
	out := new(StopServiceReply)
	err := c.cc.Invoke(ctx, "/api.Core/StopService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) DeployService(ctx context.Context, opts ...grpc.CallOption) (Core_DeployServiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[2], "/api.Core/DeployService", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreDeployServiceClient{stream}
	return x, nil
}

type Core_DeployServiceClient interface {
	Send(*DeployServiceRequest) error
	Recv() (*DeployServiceReply, error)
	grpc.ClientStream
}

type coreDeployServiceClient struct {
	grpc.ClientStream
}

func (x *coreDeployServiceClient) Send(m *DeployServiceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreDeployServiceClient) Recv() (*DeployServiceReply, error) {
	m := new(DeployServiceReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceReply, error) {
	out := new(DeleteServiceReply)
	err := c.cc.Invoke(ctx, "/api.Core/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesReply, error) {
	out := new(ListServicesReply)
	err := c.cc.Invoke(ctx, "/api.Core/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := c.cc.Invoke(ctx, "/api.Core/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ServiceLogs(ctx context.Context, in *ServiceLogsRequest, opts ...grpc.CallOption) (Core_ServiceLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Core_serviceDesc.Streams[3], "/api.Core/ServiceLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Core_ServiceLogsClient interface {
	Recv() (*LogData, error)
	grpc.ClientStream
}

type coreServiceLogsClient struct {
	grpc.ClientStream
}

func (x *coreServiceLogsClient) Recv() (*LogData, error) {
	m := new(LogData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoreServer is the server API for Core service.
type CoreServer interface {
	// Subscribe to a stream that listens for events from a service.
	ListenEvent(*ListenEventRequest, Core_ListenEventServer) error
	// Subscribe to a stream that listens for task's result from a service.
	ListenResult(*ListenResultRequest, Core_ListenResultServer) error
	// Execute a service's task through [Core](../guide/start-here/core.md).
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskReply, error)
	// Start a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StartService(context.Context, *StartServiceRequest) (*StartServiceReply, error)
	// Stop a service. The service must be already deployed to [Core](../guide/start-here/core.md).
	StopService(context.Context, *StopServiceRequest) (*StopServiceReply, error)
	// Deploy a service to [Core](../guide/start-here/core.md). This will give you an unique identifier which is used to interact with the service.
	DeployService(Core_DeployServiceServer) error
	// Delete a service from Core. This function only deletes a deployed service in [Core](../guide/start-here/core.md). If the service's code is on your computer, the source code will not be deleted.
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceReply, error)
	// List all services already deployed in [Core](../guide/start-here/core.md).
	ListServices(context.Context, *ListServicesRequest) (*ListServicesReply, error)
	// Get the definition of an already-deployed service from its ID.
	GetService(context.Context, *GetServiceRequest) (*GetServiceReply, error)
	// ServiceLogs gives a stream for dependency logs of a service.
	ServiceLogs(*ServiceLogsRequest, Core_ServiceLogsServer) error
}

func RegisterCoreServer(s *grpc.Server, srv CoreServer) {
	s.RegisterService(&_Core_serviceDesc, srv)
}

func _Core_ListenEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenEvent(m, &coreListenEventServer{stream})
}

type Core_ListenEventServer interface {
	Send(*EventData) error
	grpc.ServerStream
}

type coreListenEventServer struct {
	grpc.ServerStream
}

func (x *coreListenEventServer) Send(m *EventData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ListenResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ListenResult(m, &coreListenResultServer{stream})
}

type Core_ListenResultServer interface {
	Send(*ResultData) error
	grpc.ServerStream
}

type coreListenResultServer struct {
	grpc.ServerStream
}

func (x *coreListenResultServer) Send(m *ResultData) error {
	return x.ServerStream.SendMsg(m)
}

func _Core_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/StopService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).StopService(ctx, req.(*StopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_DeployService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServer).DeployService(&coreDeployServiceServer{stream})
}

type Core_DeployServiceServer interface {
	Send(*DeployServiceReply) error
	Recv() (*DeployServiceRequest, error)
	grpc.ServerStream
}

type coreDeployServiceServer struct {
	grpc.ServerStream
}

func (x *coreDeployServiceServer) Send(m *DeployServiceReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreDeployServiceServer) Recv() (*DeployServiceRequest, error) {
	m := new(DeployServiceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Core_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Core/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ServiceLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServer).ServiceLogs(m, &coreServiceLogsServer{stream})
}

type Core_ServiceLogsServer interface {
	Send(*LogData) error
	grpc.ServerStream
}

type coreServiceLogsServer struct {
	grpc.ServerStream
}

func (x *coreServiceLogsServer) Send(m *LogData) error {
	return x.ServerStream.SendMsg(m)
}

var _Core_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _Core_ExecuteTask_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _Core_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _Core_StopService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Core_DeleteService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Core_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Core_GetService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenEvent",
			Handler:       _Core_ListenEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenResult",
			Handler:       _Core_ListenResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeployService",
			Handler:       _Core_DeployService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ServiceLogs",
			Handler:       _Core_ServiceLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/mesg-foundation/core/interface/grpc/core/api.proto",
}

func init() {
	proto.RegisterFile("github.com/mesg-foundation/core/interface/grpc/core/api.proto", fileDescriptor_api_5f64e5fc3749a8a2)
}

var fileDescriptor_api_5f64e5fc3749a8a2 = []byte{
	// 908 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xb6, 0xbb, 0xde, 0x6c, 0xf2, 0x76, 0xd3, 0x6c, 0x5e, 0xd2, 0x76, 0xb1, 0x20, 0x44, 0x03,
	0x88, 0x80, 0xc4, 0xa6, 0x6c, 0x2b, 0x51, 0x55, 0x94, 0x8a, 0x90, 0xa5, 0x89, 0x1a, 0x05, 0xc9,
	0x1b, 0x38, 0x70, 0x9b, 0x7a, 0xa7, 0xae, 0x15, 0xc7, 0x36, 0x9e, 0x71, 0xc4, 0x72, 0xe7, 0xce,
	0x05, 0x71, 0xe4, 0x1f, 0xe0, 0x8f, 0x44, 0xf3, 0xc3, 0xde, 0x71, 0x1c, 0x4a, 0xd2, 0xdb, 0xce,
	0xf7, 0xe6, 0x7d, 0xf3, 0xf9, 0xbd, 0xf9, 0xde, 0x2c, 0x3c, 0x8b, 0x62, 0xf1, 0xa6, 0x7c, 0x35,
	0x0e, 0xb3, 0x8b, 0xfd, 0x0b, 0xc6, 0xa3, 0x2f, 0x5e, 0x67, 0x65, 0x3a, 0xa7, 0x22, 0xce, 0xd2,
	0xfd, 0x30, 0x2b, 0xd8, 0x7e, 0x9c, 0x0a, 0x56, 0xbc, 0xa6, 0x21, 0xdb, 0x8f, 0x8a, 0x3c, 0xd4,
	0x18, 0xcd, 0xe3, 0x71, 0x5e, 0x64, 0x22, 0xc3, 0x0e, 0xcd, 0x63, 0xff, 0xdb, 0x77, 0xe1, 0xe0,
	0xac, 0xb8, 0x8c, 0x43, 0xa6, 0x79, 0xc8, 0x19, 0xe0, 0x49, 0xcc, 0x05, 0x4b, 0xa7, 0x97, 0x2c,
	0x15, 0x01, 0xfb, 0xa5, 0x64, 0x5c, 0xe0, 0xfb, 0xb0, 0x66, 0xb6, 0x1d, 0x1f, 0x8e, 0xdc, 0x5d,
	0x77, 0x6f, 0x2d, 0x58, 0x02, 0xb8, 0x0b, 0x7d, 0x26, 0x77, 0x7f, 0x1f, 0x27, 0x82, 0x15, 0xa3,
	0x3b, 0x2a, 0x6e, 0x43, 0x64, 0x0a, 0x6b, 0x8a, 0xef, 0x90, 0x0a, 0x8a, 0x3e, 0xac, 0xaa, 0xd8,
	0x4b, 0xb6, 0x30, 0x5c, 0xf5, 0x5a, 0x1e, 0xc4, 0xaa, 0x8d, 0x86, 0x68, 0x09, 0x90, 0xbf, 0x5c,
	0xd8, 0xd2, 0xea, 0x02, 0xc6, 0xcb, 0xe4, 0x86, 0xf2, 0x76, 0x00, 0x04, 0xe5, 0xe7, 0x0d, 0x75,
	0x16, 0x82, 0x04, 0x06, 0x59, 0x29, 0xf2, 0xb2, 0xd2, 0xdf, 0x51, 0x3b, 0x1a, 0x98, 0xe6, 0x88,
	0xf4, 0x82, 0x8f, 0xbc, 0xdd, 0x8e, 0xe6, 0xa8, 0x10, 0xf2, 0x8f, 0x0b, 0xa0, 0x35, 0xa9, 0x4f,
	0x94, 0x15, 0xf9, 0x95, 0x85, 0xa5, 0xac, 0x7c, 0x2d, 0xc9, 0x86, 0x70, 0x04, 0x3d, 0x29, 0x41,
	0xd6, 0x40, 0x2b, 0xaa, 0x96, 0xf2, 0x63, 0xf4, 0xd1, 0x32, 0xa6, 0xb5, 0x2c, 0x01, 0x29, 0x44,
	0x2f, 0x54, 0x85, 0x3c, 0xfd, 0x31, 0x4b, 0x04, 0x3f, 0x86, 0xf5, 0xfa, 0x98, 0x33, 0x1a, 0xf1,
	0x51, 0x57, 0x69, 0x6d, 0x82, 0xe4, 0x0f, 0x17, 0x70, 0xaa, 0x10, 0x76, 0x46, 0xf9, 0xf9, 0xcd,
	0xea, 0xf8, 0x56, 0xc9, 0x71, 0x5a, 0x69, 0x32, 0x92, 0x6b, 0xa0, 0x2d, 0xc9, 0xbb, 0x4e, 0xd2,
	0x63, 0x18, 0x36, 0x14, 0xe5, 0xc9, 0xe2, 0xff, 0xcb, 0x48, 0x1e, 0xc1, 0xd6, 0x4c, 0xd0, 0x42,
	0xcc, 0xb4, 0xca, 0x1b, 0x7d, 0x08, 0xd9, 0x82, 0xcd, 0x66, 0x52, 0x9e, 0x2c, 0xc8, 0x04, 0x70,
	0x26, 0xb2, 0xfc, 0x56, 0x44, 0x08, 0xc3, 0x46, 0x8e, 0xe4, 0x79, 0x09, 0xdb, 0x87, 0x2c, 0x4f,
	0xb2, 0xc5, 0x15, 0x26, 0x84, 0x4e, 0x59, 0x24, 0xba, 0x72, 0x47, 0x4e, 0x20, 0x17, 0x78, 0x1f,
	0xba, 0xe1, 0x9b, 0x32, 0x3d, 0x57, 0x35, 0x1b, 0x1c, 0x39, 0x81, 0x5e, 0x1e, 0xf4, 0xa0, 0x7b,
	0x49, 0x93, 0x92, 0x91, 0xbf, 0xef, 0x00, 0x5e, 0x61, 0x93, 0x75, 0x79, 0x02, 0x2b, 0x5c, 0x50,
	0x51, 0x72, 0x45, 0xd7, 0x9f, 0xec, 0x8c, 0xe5, 0x20, 0x68, 0x6f, 0x1c, 0xcf, 0xd4, 0xae, 0x23,
	0x27, 0x30, 0xfb, 0x71, 0xc7, 0xfe, 0x9e, 0x8e, 0xd1, 0x62, 0xf5, 0xf8, 0x73, 0xd8, 0xb8, 0xa4,
	0x49, 0xac, 0x67, 0xc6, 0xb4, 0x28, 0xb2, 0x42, 0xdf, 0xb1, 0x23, 0x27, 0xb8, 0x1a, 0xf0, 0x7f,
	0x83, 0x15, 0xcd, 0x2f, 0x6f, 0xc6, 0x05, 0xe3, 0x9c, 0x46, 0xcc, 0xd4, 0xa8, 0x5a, 0xe2, 0x57,
	0xe0, 0x89, 0x45, 0xce, 0x94, 0xce, 0xbb, 0x93, 0x8f, 0xde, 0xae, 0x73, 0x7c, 0xb6, 0xc8, 0x59,
	0xa0, 0x12, 0xc8, 0x07, 0xe0, 0xc9, 0x15, 0xf6, 0xa1, 0x17, 0xfc, 0x78, 0x7a, 0x7a, 0x7c, 0xfa,
	0x62, 0xe8, 0xe0, 0x2a, 0x78, 0x87, 0x3f, 0x9c, 0x4e, 0x87, 0xee, 0xb2, 0x42, 0x8f, 0x65, 0xb9,
	0x13, 0x26, 0xd8, 0xad, 0x1a, 0xb7, 0x2d, 0xcb, 0xda, 0xc8, 0x92, 0xad, 0xbb, 0xa7, 0xa7, 0x8b,
	0xc1, 0xb8, 0xa1, 0x22, 0xdf, 0xc0, 0x66, 0x13, 0x96, 0x2d, 0xf8, 0x0c, 0x56, 0x0d, 0x1d, 0x1f,
	0xb9, 0xbb, 0x9d, 0xbd, 0xfe, 0x64, 0x7d, 0x2c, 0xc7, 0xe9, 0xb8, 0x62, 0xac, 0xc3, 0xe4, 0x4b,
	0xd8, 0x7c, 0xc1, 0x6e, 0x77, 0x43, 0x9f, 0xc2, 0x86, 0x9d, 0x22, 0x0f, 0xfc, 0x14, 0x7a, 0x26,
	0xae, 0xb6, 0xb7, 0xce, 0xab, 0xa2, 0xe4, 0x27, 0x40, 0x83, 0x9d, 0x64, 0x11, 0xbf, 0x99, 0xb5,
	0x09, 0x0c, 0xe6, 0x2c, 0x67, 0xe9, 0x9c, 0xa5, 0x61, 0xcc, 0xe4, 0xb5, 0x92, 0x0e, 0x6d, 0x60,
	0xe4, 0x77, 0x17, 0x7a, 0x27, 0x59, 0xa4, 0x2c, 0xbd, 0x03, 0x50, 0xc7, 0xaa, 0x21, 0x6e, 0x21,
	0xf8, 0x49, 0xa3, 0xed, 0x9b, 0xaa, 0xed, 0x26, 0xd7, 0x6a, 0x32, 0x22, 0x78, 0xf3, 0x6a, 0x64,
	0x0c, 0x02, 0xf5, 0x9b, 0x7c, 0x68, 0x1a, 0x3f, 0x80, 0xd5, 0x99, 0xa0, 0xe9, 0x9c, 0x16, 0xf3,
	0xa1, 0x83, 0x6b, 0xd0, 0x55, 0x97, 0x6e, 0xe8, 0x4e, 0xfe, 0xec, 0x82, 0xf7, 0x5d, 0x56, 0x30,
	0x7c, 0x0a, 0x7d, 0xeb, 0xa9, 0xc2, 0x07, 0xfa, 0x94, 0xd6, 0xe3, 0xe5, 0xdf, 0x55, 0x81, 0xfa,
	0xfd, 0x21, 0xce, 0x43, 0x17, 0x9f, 0xc1, 0xc0, 0x7e, 0x48, 0x70, 0x64, 0x25, 0x37, 0xde, 0x16,
	0x7f, 0x43, 0x45, 0x96, 0xb3, 0x5d, 0xa5, 0x3f, 0x87, 0xbe, 0x35, 0xac, 0xcc, 0xd1, 0xed, 0x81,
	0xea, 0xdf, 0x6b, 0x07, 0xe4, 0x45, 0x73, 0xf0, 0x00, 0x06, 0xf6, 0x08, 0x32, 0xe7, 0x5f, 0x33,
	0xca, 0xfc, 0xfb, 0xd7, 0x44, 0x34, 0xc7, 0x73, 0xe8, 0x5b, 0xd3, 0xc7, 0x88, 0x68, 0xcf, 0x30,
	0x23, 0xa2, 0x35, 0xa8, 0x1c, 0x3c, 0x86, 0xf5, 0x86, 0x17, 0xf1, 0xbd, 0xeb, 0xfc, 0xa9, 0x49,
	0x1e, 0xfc, 0x87, 0x75, 0x89, 0xb3, 0xe7, 0x3e, 0x74, 0x71, 0x2a, 0xa9, 0x2c, 0x43, 0xd5, 0x54,
	0x6d, 0x6b, 0xd6, 0x54, 0x2d, 0xff, 0xa9, 0xb2, 0xd8, 0x56, 0xb3, 0xda, 0x72, 0xc5, 0x94, 0xa6,
	0x2c, 0x2d, 0x5f, 0x12, 0x07, 0xbf, 0x06, 0x58, 0x7a, 0x07, 0xf5, 0xbe, 0x96, 0xff, 0xfc, 0xed,
	0x16, 0xae, 0xb3, 0x9f, 0x40, 0xdf, 0x72, 0x4f, 0x55, 0xd4, 0x96, 0x9f, 0xfc, 0x81, 0x7d, 0xa7,
	0xe5, 0x9d, 0x38, 0x58, 0xf9, 0xd9, 0x93, 0x86, 0x7c, 0xb5, 0xa2, 0xfe, 0x48, 0x3d, 0xfa, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x02, 0xa7, 0x67, 0x15, 0xd1, 0x09, 0x00, 0x00,
}
