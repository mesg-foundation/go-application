syntax = "proto3";

package core;

// This is the definition of a MESG Service.
message Service {
  string ID = 10;                           // Service's unique id service hash.
  string name = 1;                          // Service's name.
  string description = 2;                   // Service's description.
  repeated Task tasks = 5;                  // The list of tasks this service can execute.
  repeated Event events = 6;                // The list of events this service can emit.
  repeated Dependency dependencies = 7;     // The Docker dependencies this service requires.
  Dependency configuration = 8;             // Service's Docker configuration.
  string repository = 9;                    // Service's repository that contain its source code.
}

// Events are emitted by the service whenever the service wants.
// TODO(ilgooz) remove key, serviceName fields when Event type crafted manually.
message Event {
  string key = 4;                   // Event's key.
  string name = 1;                  // Event's name.
  string description = 2;           // Event's description.
  repeated Parameter data = 3;      // List of data of this event.
}

// A task is a function that requires inputs and returns output.
// TODO(ilgooz) remove key, serviceName fields when Task type crafted manually.
message Task {
  string key = 8;                     // Task's key.
  string name = 1;                    // Task's name.
  string description = 2;             // Task's description.
  repeated Parameter inputs = 6;      // List inputs of this task.
  repeated Output outputs = 7;        // List of outputs this task can return.
}

// A output is the data a task must return.
// TODO(ilgooz) remove key, taskKey, serviceName fields when Output type crafted manually.
message Output {
  string key = 4;                   // Output's key.
  string name = 1;                  // Output's name.
  string description = 2;           // Output's description.
  repeated Parameter data = 3;      // List of data of this output.
}

// A parameter is the definition of a specific value.
message Parameter {
  string key = 8;         // Parameter's key.
  string name = 1;        // Parameter's name.
  string description = 2; // Parameter's description.
  string type = 3;        // Parameter's type: `String`, `Number`, `Boolean` or `Object`.
  bool optional = 4;      // Set the parameter as optional.
}

// A dependency is a configuration of an other Docker container that runs separately from the service.
message Dependency {
  string key = 8;                   // Dependency's key.
  string image = 1;                 // Image's name of the Docker.
  repeated string volumes = 2;      // List of volumes.
  repeated string volumesfrom = 3;  // List of volumes mounted from other dependencies.
  repeated string ports = 4;        // List of ports the container exposes.
  string command = 5;               // Command to run the container.
}
